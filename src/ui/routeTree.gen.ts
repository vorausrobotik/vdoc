/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProjectsProjectNameIndexImport } from './routes/projects/$projectName/index'
import { Route as ProjectsProjectNameVersionsIndexImport } from './routes/projects/$projectName/versions/index'
import { Route as ProjectsProjectNameVersionsVersionImport } from './routes/projects/$projectName/versions/$version'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProjectsProjectNameIndexRoute = ProjectsProjectNameIndexImport.update({
  id: '/projects/$projectName/',
  path: '/projects/$projectName/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectsProjectNameVersionsIndexRoute =
  ProjectsProjectNameVersionsIndexImport.update({
    id: '/projects/$projectName/versions/',
    path: '/projects/$projectName/versions/',
    getParentRoute: () => rootRoute,
  } as any)

const ProjectsProjectNameVersionsVersionRoute =
  ProjectsProjectNameVersionsVersionImport.update({
    id: '/projects/$projectName/versions/$version',
    path: '/projects/$projectName/versions/$version',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectName/': {
      id: '/projects/$projectName/'
      path: '/projects/$projectName'
      fullPath: '/projects/$projectName'
      preLoaderRoute: typeof ProjectsProjectNameIndexImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectName/versions/$version': {
      id: '/projects/$projectName/versions/$version'
      path: '/projects/$projectName/versions/$version'
      fullPath: '/projects/$projectName/versions/$version'
      preLoaderRoute: typeof ProjectsProjectNameVersionsVersionImport
      parentRoute: typeof rootRoute
    }
    '/projects/$projectName/versions/': {
      id: '/projects/$projectName/versions/'
      path: '/projects/$projectName/versions'
      fullPath: '/projects/$projectName/versions'
      preLoaderRoute: typeof ProjectsProjectNameVersionsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/projects/$projectName': typeof ProjectsProjectNameIndexRoute
  '/projects/$projectName/versions/$version': typeof ProjectsProjectNameVersionsVersionRoute
  '/projects/$projectName/versions': typeof ProjectsProjectNameVersionsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/projects/$projectName': typeof ProjectsProjectNameIndexRoute
  '/projects/$projectName/versions/$version': typeof ProjectsProjectNameVersionsVersionRoute
  '/projects/$projectName/versions': typeof ProjectsProjectNameVersionsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/projects/$projectName/': typeof ProjectsProjectNameIndexRoute
  '/projects/$projectName/versions/$version': typeof ProjectsProjectNameVersionsVersionRoute
  '/projects/$projectName/versions/': typeof ProjectsProjectNameVersionsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/projects/$projectName'
    | '/projects/$projectName/versions/$version'
    | '/projects/$projectName/versions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/projects/$projectName'
    | '/projects/$projectName/versions/$version'
    | '/projects/$projectName/versions'
  id:
    | '__root__'
    | '/'
    | '/projects/$projectName/'
    | '/projects/$projectName/versions/$version'
    | '/projects/$projectName/versions/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProjectsProjectNameIndexRoute: typeof ProjectsProjectNameIndexRoute
  ProjectsProjectNameVersionsVersionRoute: typeof ProjectsProjectNameVersionsVersionRoute
  ProjectsProjectNameVersionsIndexRoute: typeof ProjectsProjectNameVersionsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProjectsProjectNameIndexRoute: ProjectsProjectNameIndexRoute,
  ProjectsProjectNameVersionsVersionRoute:
    ProjectsProjectNameVersionsVersionRoute,
  ProjectsProjectNameVersionsIndexRoute: ProjectsProjectNameVersionsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/projects/$projectName/",
        "/projects/$projectName/versions/$version",
        "/projects/$projectName/versions/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/projects/$projectName/": {
      "filePath": "projects/$projectName/index.tsx"
    },
    "/projects/$projectName/versions/$version": {
      "filePath": "projects/$projectName/versions/$version.tsx"
    },
    "/projects/$projectName/versions/": {
      "filePath": "projects/$projectName/versions/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
