/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProjectNameIndexImport } from './routes/$projectName/index'
import { Route as ProjectNameVersionsIndexImport } from './routes/$projectName/versions/index'
import { Route as ProjectNameVersionsVersionImport } from './routes/$projectName/versions/$version'

// Create Virtual Routes

const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProjectNameIndexRoute = ProjectNameIndexImport.update({
  id: '/$projectName/',
  path: '/$projectName/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectNameVersionsIndexRoute = ProjectNameVersionsIndexImport.update({
  id: '/$projectName/versions/',
  path: '/$projectName/versions/',
  getParentRoute: () => rootRoute,
} as any)

const ProjectNameVersionsVersionRoute = ProjectNameVersionsVersionImport.update(
  {
    id: '/$projectName/versions/$version',
    path: '/$projectName/versions/$version',
    getParentRoute: () => rootRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/$projectName/': {
      id: '/$projectName/'
      path: '/$projectName'
      fullPath: '/$projectName'
      preLoaderRoute: typeof ProjectNameIndexImport
      parentRoute: typeof rootRoute
    }
    '/$projectName/versions/$version': {
      id: '/$projectName/versions/$version'
      path: '/$projectName/versions/$version'
      fullPath: '/$projectName/versions/$version'
      preLoaderRoute: typeof ProjectNameVersionsVersionImport
      parentRoute: typeof rootRoute
    }
    '/$projectName/versions/': {
      id: '/$projectName/versions/'
      path: '/$projectName/versions'
      fullPath: '/$projectName/versions'
      preLoaderRoute: typeof ProjectNameVersionsIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/$projectName': typeof ProjectNameIndexRoute
  '/$projectName/versions/$version': typeof ProjectNameVersionsVersionRoute
  '/$projectName/versions': typeof ProjectNameVersionsIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/$projectName': typeof ProjectNameIndexRoute
  '/$projectName/versions/$version': typeof ProjectNameVersionsVersionRoute
  '/$projectName/versions': typeof ProjectNameVersionsIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/$projectName/': typeof ProjectNameIndexRoute
  '/$projectName/versions/$version': typeof ProjectNameVersionsVersionRoute
  '/$projectName/versions/': typeof ProjectNameVersionsIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$projectName'
    | '/$projectName/versions/$version'
    | '/$projectName/versions'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$projectName'
    | '/$projectName/versions/$version'
    | '/$projectName/versions'
  id:
    | '__root__'
    | '/'
    | '/$projectName/'
    | '/$projectName/versions/$version'
    | '/$projectName/versions/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  ProjectNameIndexRoute: typeof ProjectNameIndexRoute
  ProjectNameVersionsVersionRoute: typeof ProjectNameVersionsVersionRoute
  ProjectNameVersionsIndexRoute: typeof ProjectNameVersionsIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  ProjectNameIndexRoute: ProjectNameIndexRoute,
  ProjectNameVersionsVersionRoute: ProjectNameVersionsVersionRoute,
  ProjectNameVersionsIndexRoute: ProjectNameVersionsIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$projectName/",
        "/$projectName/versions/$version",
        "/$projectName/versions/"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/$projectName/": {
      "filePath": "$projectName/index.tsx"
    },
    "/$projectName/versions/$version": {
      "filePath": "$projectName/versions/$version.tsx"
    },
    "/$projectName/versions/": {
      "filePath": "$projectName/versions/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
